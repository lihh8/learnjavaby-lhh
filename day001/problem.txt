一、git本地仓库如何修改分支名称，修改名称后怎么与远程仓库的固定分支关联？
  修改名称
  git branch <分支名称>
  git branch -m  <新的分支名称>
  
  删除远程旧分支（可选）
  git push origin --delete <旧的分支名称>
  
  推送新分支到远程，并建立跟踪关系
  git push -u origin <新的分支名称>
  
  团队成员需要清理旧分支缓存
  git fetch --prune
  切换分支
  git checkout <新的分支名称>

二、git远程仓库所在的ip变更了或仓库地址变了，怎么修改本地仓库和远程仓库的关联？
 1.通过命令直接修改
  git remote -v 查看远程连接
  git remote set-url origin  <新仓库地址>
 2.删除后重新创建
  git remote rm origin
  git remote add origin <新仓库地址>
  首次推送时指定分支
  git remote -u origin master
 3.修改配置文件
  进入项目目录的 .git/config 文件
  编辑 [remote "origin"]
        url = 新仓库地址

三、 push 的时候报错：
  tip of your current branch is behind(本地分支缺少远程分支的最新提交)，
  并且在pull的时候报错：
  refusing to merge unrelated histories(Git 默认禁止合并无共同祖先的分支)？
  
  这是因为有人直接在远程仓库修改了内容，
  或者本地仓库初始化时未从远程克隆，而是直接git init后关联远程仓库
  或者远程仓库被强制重置（比如git push force 或删除了某些提交）
  可以使用以下方法解决
  1.强制同步远程历史,此方法会保留两边的提交记录，但创建一个新的合并节点
    git pull origin master --allow-unrelated-histories 
	解决可能出现的冲突后提交
	git add
	git commit -m "unrelated-histories"
	重新推送
	git push origin master
  2.变基,这种方法会将本地提交“嫁接”到远程最新提交之后，保持线性历史
   git pull --rebase origin master 
   如果出现冲突，解决后继续变基
   git rebase --continue
   完成变基后继续推送
   git push origin master   
	
  3.强制推送本地,会覆盖远程历史,仅适用于确定需要完全丢弃远程变更的场景
  git push --force origin master 
  
四、查询git历史记录
  查询所有历史记录
  git log
  
  将每次记录整理到一行
  git log --oneline
  
  以 ASCII 图形显示分支合并轨迹
  git log --graph
  
  以 ASCII 图形显示分支合并轨迹,将每次记录整理到一行
  git log --graph --oneline
  
  差异化对比
  git log -p
  
  文件变更统计
  git log --stat
  
  按作者名称查看记录
  git log --anthor="作者名称"
  
  按提交内容查看记录
  git log --grep=""  



